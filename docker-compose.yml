services:
  generate-data:
    image: ${GENERATE_DATA_IMAGE:-python:3.10-slim}
    container_name: ${GENERATE_DATA_CONTAINER_NAME:-school_journal_generate_data}
    working_dir: /app
    volumes:
      - ./generate_faker_data.py:/app/generate_faker_data.py
#      - ./db-init:/app/db-init
    command: >
      sh -c "pip install requests faker && 
      python generate_faker_data.py --endpoint students --count 500 &&
      python generate_faker_data.py --endpoint subjects --count 500 &&
      python generate_faker_data.py --endpoint grades --count 500"
    networks:
      - app-network
    depends_on:
      app:
        condition: service_healthy

  db:
    image: ${DB_IMAGE:-postgres:15-alpine}
    container_name: ${DB_CONTAINER_NAME:-school_journal_db}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-school_journal}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d school_journal" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  app:
    image: ${APP_IMAGE:-school_journal_app}
    container_name: ${APP_CONTAINER_NAME:-school_journal_app}
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST:-db}:${DB_PORT:-5432}/${POSTGRES_DB:-school_journal}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD:-postgres}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8080:8080"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

volumes:
  db-data:

networks:
  app-network: